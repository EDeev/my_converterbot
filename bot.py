import asyncio
import logging
import os
import shutil
import zipfile
from pathlib import Path
from tempfile import TemporaryDirectory

from aiogram import Bot, Dispatcher, F, Router
from aiogram.types import Message, BufferedInputFile
from aiogram.filters import Command
from aiogram.enums.parse_mode import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.client.bot import DefaultBotProperties

# –ò–º–ø–æ—Ä—Ç –Ω–∞—à–∏—Ö –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–æ–≤
from md_to_docx import MarkdownToDocxConverter, DocumentSettings
from rep_to_txt import generate_complete_project_structure

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = "**************************"  # @my_convbot

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())
router = Router()

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

@router.message(Command("start"))
async def start_handler(msg: Message) -> None:
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    await msg.answer(
        "<b>–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤ —Å–≤–æ—ë–º –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä–µ!</b>\n\n"
        "üìã <b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>\n"
        "‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ .md —Ñ–∞–π–ª ‚Üí –ø–æ–ª—É—á–∏—Ç–µ .docx\n"
        "‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ .zip –∞—Ä—Ö–∏–≤ ‚Üí –ø–æ–ª—É—á–∏—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞ –≤ .txt\n\n"
        "üìù <b>/help</b> - –î–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"
    )

@router.message(Command("help"))
async def help_handler(msg: Message) -> None:
    """–ü–æ–¥—Ä–æ–±–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞"""
    help_text = (
        "<b>üìö –ü–æ–¥—Ä–æ–±–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ</b>\n\n"
        "<b>1. –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è Markdown ‚Üí DOCX:</b>\n"
        "‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ .md —Ñ–∞–π–ª\n"
        "‚Ä¢ –ü–æ–ª—É—á–∏—Ç–µ DOCX —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –ø–æ –ì–û–°–¢\n\n"
        "<b>2. –ê–Ω–∞–ª–∏–∑ –∞—Ä—Ö–∏–≤–∞ ‚Üí TXT:</b>\n"
        "‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ .zip –∞—Ä—Ö–∏–≤\n"
        "‚Ä¢ –ü–æ–ª—É—á–∏—Ç–µ –ø–æ–ª–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–∞–π–ª–µ\n\n"
        "<b>‚ö° –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:</b>\n"
        "‚Ä¢ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: –¥–æ 20 –ú–ë\n"
        "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: .md, .zip"
    )
    await msg.answer(help_text)

@router.message(F.document)
async def handle_document(msg: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    document = msg.document
    file_name = document.file_name
    file_size = document.file_size
    
    if file_size > 20 * 1024 * 1024:
        await msg.answer("‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π! –ú–∞–∫—Å–∏–º—É–º 20 –ú–ë")
        return
    
    file_ext = Path(file_name).suffix.lower()
    
    status_msg = await msg.answer("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–∞–π–ª...")
    
    try:
        with TemporaryDirectory() as temp_dir:
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            file_info = await bot.get_file(document.file_id)
            input_path = os.path.join(temp_dir, file_name)
            await bot.download_file(file_info.file_path, input_path)
            
            if file_ext == '.md':
                # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è MD ‚Üí DOCX
                output_path = await convert_md_to_docx(input_path, temp_dir)
                output_name = Path(file_name).stem + '.docx'
                
            elif file_ext in ['.zip']:
                # –ê–Ω–∞–ª–∏–∑ –∞—Ä—Ö–∏–≤–∞ ‚Üí TXT
                output_path = await analyze_archive(input_path, temp_dir, file_ext)
                output_name = Path(file_name).stem + '_structure.txt'
                
            else:
                await status_msg.edit_text("‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞!")
                return
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            with open(output_path, 'rb') as output_file:
                result_file = BufferedInputFile(
                    output_file.read(),
                    filename=output_name
                )
                await msg.answer_document(result_file)
            
            await status_msg.edit_text("‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {e}")
        await status_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}")

async def convert_md_to_docx(md_path: str, temp_dir: str) -> str:
    """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è Markdown –≤ DOCX"""
    output_path = os.path.join(temp_dir, "output.docx")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    settings = DocumentSettings()
    settings.font_name = "Times New Roman"
    settings.font_size = 14
    settings.line_spacing = 1.5
    settings.margin_left = 3.0
    settings.auto_numbering_headings = True
    
    converter = MarkdownToDocxConverter(settings)
    converter.convert(md_path, output_path)
    
    return output_path

async def analyze_archive(archive_path: str, temp_dir: str, file_ext: str) -> str:
    """–ê–Ω–∞–ª–∏–∑ –∞—Ä—Ö–∏–≤–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞"""
    extract_dir = os.path.join(temp_dir, "extracted")
    os.makedirs(extract_dir, exist_ok=True)
    
    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞
    with zipfile.ZipFile(archive_path, 'r') as zip_ref:
        zip_ref.extractall(extract_dir)
    
    # –ü–æ–∏—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–∞–ø–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞
    extracted_items = os.listdir(extract_dir)
    if len(extracted_items) == 1 and os.path.isdir(os.path.join(extract_dir, extracted_items[0])):
        project_root = os.path.join(extract_dir, extracted_items[0])
    else:
        project_root = extract_dir
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    structure = generate_complete_project_structure(project_root)
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª
    output_path = os.path.join(temp_dir, "project_structure.txt")
    with open(output_path, 'w', encoding='utf-8') as f:
        f.write(structure)
    
    return output_path

@router.message()
async def handle_other_messages(msg: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    await msg.answer(
        "<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:</b>\n"
        "‚Ä¢ .md —Ñ–∞–π–ª –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ DOCX\n"
        "‚Ä¢ .zip –∞—Ä—Ö–∏–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π —Å–ø—Ä–∞–≤–∫–∏!"
    )

async def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    try:
        logger.info("–ó–∞–ø—É—Å–∫ File Converter Bot...")
        dp.include_router(router)
        await bot.delete_webhook(drop_pending_updates=True)
        logger.info("Bot started successfully")

        await dp.start_polling(bot)
        
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        await bot.session.close()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("Bot stopped by user")
    except Exception as e:
        logger.critical(f"Unhandled exception: {e}")